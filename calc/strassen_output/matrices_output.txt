STRASSEN MATRIX MULTIPLICATION WITH RECURSIVE TREE VISUALIZATION
======================================================================


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[5, 15, 12, 12], [17, 16, 4, 12], [14, 9, 9, 13], [3, 11, 10, 6]])

T2_L1 = np.array([[1, 12, 9, 16], [11, 13, 4, 13], [13, 9, 1, 14], [7, 12, 5, 8]])

T3_L1 = np.array([[4, 9, 4, 4], [7, 9, 4, 7], [6, 6, 8, 8], [0, 6, 9, 1]])

T4_L1 = np.array([[1, 6, 8, 8], [10, 7, 0, 5], [8, 3, 1, 5], [3, 5, 1, 5]])

T5_L1 = np.array([[9, 11, 9, 10], [13, 11, 12, 11], [16, 13, 13, 12], [3, 11, 12, 5]])

T6_L1 = np.array([[-4, -3, -3, 4], [-6, -3, 0, 1], [-1, 0, -8, 1], [4, 1, -5, 2]])

T7_L1 = np.array([[4, -4, -3, -2], [-4, -5, 8, -1], [2, 4, 4, -1], [0, 0, 2, -1]])

S-matrices:
S1_L1 = np.array([[9, 12, 13, 6], [11, 10, 7, 13], [11, 14, 12, 11], [11, 7, 14, 4]])

S2_L1 = np.array([[7, 7, 4, 1], [6, 3, 5, 6], [2, 6, 6, 5], [8, 4, 10, 3]])

S3_L1 = np.array([[0, -3, -9, 1], [-4, -5, 3, 0], [-1, -4, -3, 1], [1, 6, -1, 6]])

S4_L1 = np.array([[-1, -6, 0, 7], [0, -2, 3, 3], [5, -1, 3, 5], [-7, 0, -1, 5]])

S5_L1 = np.array([[2, 5, 9, 5], [5, 7, 2, 7], [9, 8, 6, 6], [3, 3, 4, 1]])

S6_L1 = np.array([[9, 9, 4, 7], [7, 5, 10, 13], [10, 10, 9, 12], [12, 13, 13, 10]])

S7_L1 = np.array([[8, 6, 13, 13], [11, 8, 10, 16], [16, 13, 15, 16], [4, 7, 13, 9]])

Q-matrices:
Q1_L1 = np.array([[474, 462, 482, 405], [505, 504, 549, 402], [467, 475, 535, 352], [324, 328, 320, 295]])

Q2_L1 = np.array([[225, 161, 278, 166], [267, 192, 263, 148], [259, 180, 243, 114], [195, 147, 198, 128]])

Q3_L1 = np.array([[-36, -49, -25, 32], [-33, -40, -55, 53], [-24, -32, -68, 62], [-32, -60, -10, 15]])

Q4_L1 = np.array([[-17, -26, 34, 105], [-45, -74, 16, 116], [-38, -55, 7, 95], [-33, -29, 13, 66]])

Q5_L1 = np.array([[184, 224, 197, 186], [222, 271, 255, 225], [250, 311, 296, 261], [184, 203, 141, 169]])

Q6_L1 = np.array([[-39, -29, -21, -63], [-63, -56, -41, -71], [-77, -76, -63, -93], [17, 17, 7, 1]])

Q7_L1 = np.array([[-68, -61, -59, -78], [37, 33, 5, -13], [120, 89, 113, 145], [28, 19, 17, 23]])


C-matrices:
C11_L1 = np.array([[205, 151, 260, 246], [275, 192, 315, 280], [299, 198, 359, 331], [135, 115, 209, 215]])

C12_L1 = np.array([[148, 175, 172, 218], [189, 231, 200, 278], [226, 279, 228, 323], [152, 143, 131, 184]])

C21_L1 = np.array([[208, 135, 312, 271], [222, 118, 279, 264], [221, 125, 250, 209], [162, 118, 211, 194]])

C22_L1 = np.array([[174, 223, 158, 208], [142, 216, 190, 236], [107, 187, 161, 207], [114, 138, 119, 183]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[4, 9, 9, 12], [13, 8, 6, 10], [11, 8, 13, 16], [9, 7, 15, 6]])

T2_L1 = np.array([[6, 11, 5, 15], [14, 6, 3, 5], [11, 11, 7, 17], [13, 9, 9, 8]])

T3_L1 = np.array([[3, 5, 4, 4], [4, 4, 6, 8], [4, 4, 7, 8], [3, 3, 9, 0]])

T4_L1 = np.array([[1, 4, 5, 8], [9, 4, 0, 2], [7, 4, 6, 8], [6, 4, 6, 6]])

T5_L1 = np.array([[9, 8, 7, 12], [9, 11, 15, 15], [9, 13, 14, 12], [5, 8, 13, 5]])

T6_L1 = np.array([[2, 2, -4, 3], [1, -2, -3, -5], [0, 3, -6, 1], [4, 2, -6, 2]])

T7_L1 = np.array([[5, -1, -2, 0], [-4, 3, 9, 5], [-2, 5, 1, -4], [-4, 1, -2, -1]])

S-matrices:
S1_L1 = np.array([[4, 5, 8, 5], [1, 3, 3, 7], [6, 8, 7, 3], [4, 3, 6, 1]])

S2_L1 = np.array([[2, 3, 3, 0], [1, 0, 3, 3], [2, 3, 5, 0], [4, 1, 5, 1]])

S3_L1 = np.array([[-2, -1, -5, -3], [0, -2, 0, 1], [-1, -3, -2, 0], [1, 3, 1, 4]])

S4_L1 = np.array([[0, -3, -3, 3], [1, 1, 1, 2], [1, 2, -1, 5], [-4, 2, -1, 3]])

S5_L1 = np.array([[2, 2, 5, 5], [0, 3, 0, 4], [4, 5, 2, 3], [0, 2, 1, 0]])

S6_L1 = np.array([[2, 4, 3, 2], [1, 1, 3, 8], [5, 5, 5, 3], [5, 6, 7, 5]])

S7_L1 = np.array([[4, 2, 5, 8], [2, 4, 4, 9], [7, 10, 6, 8], [0, 5, 5, 4]])

Q-matrices:
Q1_L1 = np.array([[127, 155, 194, 122], [136, 167, 230, 149], [194, 231, 299, 166], [157, 204, 234, 145]])

Q2_L1 = np.array([[93, 48, 151, 48], [60, 56, 100, 23], [115, 71, 186, 50], [85, 74, 151, 35]])

Q3_L1 = np.array([[-6, -13, -19, 12], [-6, -6, -24, 24], [-7, -9, -26, 24], [-15, -36, -33, -6]])

Q4_L1 = np.array([[-23, 27, -12, 60], [-4, -19, -25, 41], [-22, 11, -31, 83], [-14, 10, -26, 74]])

Q5_L1 = np.array([[46, 101, 71, 98], [78, 156, 90, 134], [74, 151, 85, 139], [62, 109, 56, 96]])

Q6_L1 = np.array([[1, 8, 13, 23], [-40, -43, -53, -48], [-22, -21, -14, 11], [-10, 0, 2, 16]])

Q7_L1 = np.array([[4, -14, 9, 15], [53, 119, 71, 87], [9, 6, -4, 21], [-28, -29, -33, -43]])


C-matrices:
C11_L1 = np.array([[62, 67, 120, 99], [107, 111, 186, 143], [107, 97, 179, 131], [53, 76, 119, 80]])

C12_L1 = np.array([[40, 88, 52, 110], [72, 150, 66, 158], [67, 142, 59, 163], [47, 73, 23, 90]])

C21_L1 = np.array([[70, 75, 139, 108], [56, 37, 75, 64], [93, 82, 155, 133], [71, 84, 125, 109]])

C22_L1 = np.array([[29, 102, 37, 109], [30, 62, 53, 102], [50, 130, 73, 151], [47, 94, 52, 120]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[4, 9, 7, 9], [10, 8, 1, 8], [7, 3, 5, 5], [0, 6, 5, 4]])

T2_L1 = np.array([[1, 8, 6, 8], [6, 8, 3, 10], [7, 4, 0, 4], [2, 7, 1, 4]])

T3_L1 = np.array([[3, 4, 2, 4], [5, 5, 1, 3], [3, 3, 5, 5], [0, 3, 5, 1]])

T4_L1 = np.array([[1, 5, 5, 5], [5, 3, 0, 5], [4, 0, 0, 0], [0, 3, 0, 3]])

T5_L1 = np.array([[7, 5, 4, 6], [9, 5, 4, 4], [8, 5, 8, 8], [1, 3, 6, 5]])

T6_L1 = np.array([[-3, -1, -1, -1], [-4, 0, 2, 2], [0, 1, -5, -1], [2, 1, -4, 0]])

T7_L1 = np.array([[3, -4, -3, -3], [-1, -3, 3, -4], [1, 2, 3, 3], [1, -3, 1, 1]])

S-matrices:
S1_L1 = np.array([[2, -5, 0, 2], [-5, -3, 0, -1], [5, 1, 2, -3], [-2, 0, -3, 1]])

S2_L1 = np.array([[-2, -4, -1, 0], [-2, 1, 2, -1], [5, 0, 4, -3], [-4, 0, -5, 1]])

S3_L1 = np.array([[-1, 1, 1, -3], [2, 3, -1, 0], [0, -3, 1, -4], [-5, 1, 1, 0]])

S4_L1 = np.array([[3, 8, 2, 0], [1, 3, -4, 0], [-9, 4, -5, -2], [4, 4, 1, -3]])

S5_L1 = np.array([[4, -1, 1, 2], [-3, -4, -2, 0], [0, 1, -2, 0], [2, 0, 2, 0]])

S6_L1 = np.array([[1, -4, 1, -1], [-3, 0, -1, -1], [5, -2, 3, -7], [-7, 1, -2, 1]])

S7_L1 = np.array([[5, 3, 2, 2], [-4, 0, -4, -1], [-4, 5, -3, -5], [2, 4, -2, -2]])

Q-matrices:
Q1_L1 = np.array([[-20, -40, -13, -13], [-31, -73, -22, 17], [14, -39, -5, 1], [-13, -13, -2, -17]])

Q2_L1 = np.array([[-20, 4, -1, -18], [-53, -16, -28, -7], [-38, -24, -19, 0], [-29, -1, -4, -6]])

Q3_L1 = np.array([[-15, 13, 5, -17], [-10, 20, 4, -19], [-22, 2, 10, -29], [1, -5, 3, -20]])

Q4_L1 = np.array([[-17, 63, -38, -25], [38, 69, 3, -15], [12, 32, 8, 0], [15, 21, -9, -9]])

Q5_L1 = np.array([[25, -23, 1, 14], [29, -25, -1, 18], [33, -20, -2, 16], [5, -7, -7, 2]])

Q6_L1 = np.array([[2, 13, -3, 10], [-8, 14, -2, -8], [-21, 9, -14, 33], [-21, 0, -11, 25]])

Q7_L1 = np.array([[37, -18, 37, 31], [-13, -4, 9, -6], [-9, 30, -21, -21], [15, 12, 9, -2]])


C-matrices:
C11_L1 = np.array([[-25, 28, -15, -21], [-35, 17, -9, -22], [-16, 43, -16, -36], [12, 27, 5, -30]])

C12_L1 = np.array([[10, -10, 6, -3], [19, -5, 3, -1], [11, -18, 8, -13], [6, -12, -4, -18]])

C21_L1 = np.array([[-37, 67, -39, -43], [-15, 53, -25, -22], [-26, 8, -11, 0], [-14, 20, -13, -15]])

C22_L1 = np.array([[-13, -18, -10, -2], [4, -23, 8, -3], [9, -4, 10, 5], [-4, -17, -6, -6]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[1, 6, 5, 3], [7, 8, 3, 4], [7, 6, 4, 8], [3, 5, 5, 2]])

T2_L1 = np.array([[0, 4, 3, 8], [5, 5, 1, 3], [6, 5, 1, 10], [5, 5, 4, 4]])

T3_L1 = np.array([[1, 5, 2, 0], [2, 4, 3, 4], [3, 3, 3, 3], [0, 3, 4, 0]])

T4_L1 = np.array([[0, 1, 3, 3], [5, 4, 0, 0], [4, 3, 1, 5], [3, 2, 1, 2]])

T5_L1 = np.array([[2, 6, 5, 4], [4, 6, 8, 7], [8, 8, 5, 4], [2, 8, 6, 0]])

T6_L1 = np.array([[-1, -2, -2, 5], [-2, -3, -2, -1], [-1, -1, -3, 2], [2, 0, -1, 2]])

T7_L1 = np.array([[1, 0, 0, 1], [-3, -2, 5, 3], [1, 2, 1, -4], [-1, 3, 1, -2]])

S-matrices:
S1_L1 = np.array([[0, -1, -6, -3], [7, 3, -3, 0], [-6, -3, 3, 4], [-4, 6, 2, 6]])

S2_L1 = np.array([[0, -2, -2, 1], [2, 1, -3, 0], [-2, -2, 0, 4], [-4, 3, -2, 2]])

S3_L1 = np.array([[0, -2, 4, 4], [-1, 0, 0, 0], [6, 0, -2, 2], [2, -4, -3, -3]])

S4_L1 = np.array([[-1, 7, 4, -4], [-3, -1, -1, -4], [0, -1, 0, -4], [5, -5, 2, -3]])

S5_L1 = np.array([[0, 1, -4, -4], [5, 2, 0, 0], [-4, -1, 3, 0], [0, 3, 4, 4]])

S6_L1 = np.array([[0, -3, -2, 1], [6, 3, -3, 0], [0, -3, 1, 6], [-2, 2, -1, 3]])

S7_L1 = np.array([[-1, 6, -2, -7], [4, 2, -4, -4], [-6, -4, 3, 0], [1, 1, 4, 3]])

Q-matrices:
Q1_L1 = np.array([[0, 20, -3, 35], [22, 32, -49, 15], [-14, 47, -32, 43], [-3, 9, -14, 23]])

Q2_L1 = np.array([[-30, 22, -28, 28], [-4, 2, -31, 15], [-32, 21, -47, 30], [-14, -1, -33, 29]])

Q3_L1 = np.array([[7, -2, 0, 8], [22, -20, -10, 2], [21, -18, -3, 9], [21, 0, -8, 8]])

Q4_L1 = np.array([[12, -19, 5, -25], [-17, 31, 16, -36], [12, -1, 23, -47], [1, 8, 14, -30]])

Q5_L1 = np.array([[10, 21, 23, 8], [-2, 29, 36, 12], [20, 31, -1, -16], [16, 12, 10, -8]])

Q6_L1 = np.array([[-22, 13, 1, 2], [-16, 1, 12, -17], [-10, 13, 0, -13], [-4, 1, -7, 2]])

Q7_L1 = np.array([[0, 7, 2, -4], [-32, -39, 41, 38], [-3, 2, -23, -27], [5, -6, -15, -11]])


C-matrices:
C11_L1 = np.array([[2, -13, -19, -2], [-25, -5, -28, 5], [-25, 17, -31, -15], [-13, -1, -25, -10]])

C12_L1 = np.array([[17, 19, 23, 16], [20, 9, 26, 14], [41, 13, -4, -7], [37, 12, 2, 0]])

C21_L1 = np.array([[-18, 3, -23, 3], [-21, 33, -15, -21], [-20, 20, -24, -17], [-13, 7, -19, -1]])

C22_L1 = np.array([[15, 9, 26, 17], [32, 11, -16, -15], [29, 21, 12, 9], [28, 11, 4, 4]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[7, 14, 13, 12], [16, 12, 7, 11], [7, 7, 11, 7], [3, 12, 13, 9]])

T2_L1 = np.array([[3, 12, 14, 13], [11, 12, 7, 17], [7, 9, 4, 6], [5, 10, 11, 10]])

T3_L1 = np.array([[5, 8, 5, 6], [10, 9, 4, 3], [3, 5, 9, 7], [1, 6, 8, 4]])

T4_L1 = np.array([[2, 6, 8, 6], [6, 3, 3, 8], [4, 2, 2, 0], [2, 6, 5, 5]])

T5_L1 = np.array([[14, 13, 8, 11], [14, 11, 9, 5], [12, 7, 13, 13], [5, 10, 11, 13]])

T6_L1 = np.array([[-4, -2, 1, 1], [-5, 0, 0, 6], [0, 2, -7, -1], [2, -2, -2, 1]])

T7_L1 = np.array([[7, -1, -5, -1], [-2, -1, 2, -6], [5, 0, 2, 6], [2, -2, -2, 4]])

S-matrices:
S1_L1 = np.array([[5, 7, 5, 1], [10, 7, 4, 6], [5, 6, 5, 8], [7, 4, 8, 3]])

S2_L1 = np.array([[5, 4, 1, 1], [5, 3, 2, 3], [0, 3, 1, 5], [4, 3, 5, 2]])

S3_L1 = np.array([[2, -2, -4, 4], [-4, -3, 3, -1], [0, -1, -1, 1], [0, 3, -2, 2]])

S4_L1 = np.array([[-1, -3, 3, 4], [-1, -3, 2, 1], [4, -3, 4, 0], [-3, -2, 0, 2]])

S5_L1 = np.array([[0, 3, 4, 0], [5, 4, 2, 3], [5, 3, 4, 3], [3, 1, 3, 1]])

S6_L1 = np.array([[7, 5, 1, 5], [6, 4, 7, 5], [5, 5, 4, 9], [7, 7, 6, 5]])

S7_L1 = np.array([[4, 4, 8, 5], [9, 4, 6, 7], [9, 3, 9, 8], [4, 2, 8, 5]])

Q-matrices:
Q1_L1 = np.array([[324, 273, 252, 231], [312, 282, 251, 177], [209, 192, 174, 158], [263, 219, 200, 206]])

Q2_L1 = np.array([[127, 129, 106, 135], [183, 152, 127, 116], [104, 85, 59, 66], [115, 113, 86, 110]])

Q3_L1 = np.array([[-22, -21, -13, 29], [-16, -42, -23, 41], [-14, -9, -20, 30], [-22, -16, -2, 14]])

Q4_L1 = np.array([[6, -60, 50, 26], [-21, -52, 36, 43], [2, -24, 24, 18], [-3, -49, 38, 24]])

Q5_L1 = np.array([[138, 129, 147, 74], [115, 118, 129, 65], [139, 116, 153, 73], [144, 101, 123, 76]])

Q6_L1 = np.array([[-28, -16, -8, -16], [7, 17, 31, 5], [-30, -34, -20, -58], [-1, -1, -14, -13]])

Q7_L1 = np.array([[-30, 7, -3, -17], [-23, -18, -52, -31], [62, 38, 106, 71], [-12, 2, 18, 0]])


C-matrices:
C11_L1 = np.array([[162, 91, 152, 166], [153, 94, 106, 124], [134, 90, 151, 174], [104, 71, 133, 154]])

C12_L1 = np.array([[116, 108, 134, 103], [99, 76, 106, 106], [125, 107, 133, 103], [122, 85, 121, 90]])

C21_L1 = np.array([[133, 69, 156, 161], [162, 100, 163, 159], [106, 61, 83, 84], [112, 64, 124, 134]])

C22_L1 = np.array([[147, 107, 125, 109], [120, 105, 132, 107], [61, 64, 75, 64], [125, 89, 98, 97]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[-1, -6, -3, 0], [-4, -8, 2, -2], [-3, -1, 4, 3], [6, -4, 5, 0]])

T2_L1 = np.array([[5, -1, -4, -1], [3, -7, -1, -8], [-2, 2, 6, 3], [6, -3, 4, 0]])

T3_L1 = np.array([[-1, -4, 0, 0], [-3, -5, 2, 1], [-2, -2, -1, 0], [3, -3, 0, -1]])

T4_L1 = np.array([[0, -2, -3, 0], [-1, -3, 0, -3], [-1, 1, 5, 3], [3, -1, 5, 1]])

T5_L1 = np.array([[0, -3, -2, 2], [-4, 0, 3, 4], [-7, 0, 1, 0], [2, -3, 1, 0]])

T6_L1 = np.array([[6, 5, -1, -1], [7, 1, -3, -6], [1, 3, 2, 0], [0, 1, -1, 0]])

T7_L1 = np.array([[1, 3, 1, 2], [0, 8, 1, 6], [-4, 1, -3, -3], [-4, 1, -4, 0]])

S-matrices:
S1_L1 = np.array([[11, 7, 13, 8], [6, 7, 7, 12], [16, 15, 14, 8], [9, 7, 11, 5]])

S2_L1 = np.array([[5, 3, 3, 1], [4, 4, 7, 5], [7, 6, 10, 2], [4, 4, 5, 4]])

S3_L1 = np.array([[-1, -2, -8, -2], [-2, -2, 2, 0], [-1, -7, -2, -3], [-4, 7, 0, 6]])

S4_L1 = np.array([[2, 2, 2, 7], [1, 1, -1, 3], [-4, 3, -2, 3], [-3, 4, 0, 2]])

S5_L1 = np.array([[6, 4, 10, 7], [2, 3, 0, 7], [9, 9, 4, 6], [5, 3, 6, 1]])

S6_L1 = np.array([[10, 5, 5, 6], [4, 5, 9, 12], [15, 8, 12, 5], [5, 14, 11, 11]])

S7_L1 = np.array([[13, 9, 15, 15], [7, 8, 6, 15], [12, 18, 12, 11], [6, 11, 11, 7]])

Q-matrices:
Q1_L1 = np.array([[-95, -94, -97, -104], [-78, -68, -102, -122], [52, 53, 43, 11], [122, 89, 120, 40]])

Q2_L1 = np.array([[-11, -17, -37, -12], [-52, -57, -90, -66], [52, 50, 83, 32], [46, 30, 37, -1]])

Q3_L1 = np.array([[9, 10, 0, 2], [7, 9, 10, 6], [7, 15, 14, 7], [7, -7, -30, -12]])

Q4_L1 = np.array([[10, -11, 8, -15], [4, -17, 1, -22], [-30, 26, -13, 17], [-18, 24, -3, 35]])

Q5_L1 = np.array([[-14, -21, 4, -31], [23, 23, -4, -6], [-33, -19, -66, -43], [15, 8, 24, -1]])

Q6_L1 = np.array([[60, 33, 52, 80], [-1, -68, -58, -27], [52, 36, 56, 52], [-11, -3, -3, 7]])

Q7_L1 = np.array([[58, 73, 67, 85], [104, 148, 126, 173], [-99, -115, -123, -99], [-93, -100, -102, -89]])


C-matrices:
C11_L1 = np.array([[-13, -11, -26, -3], [7, 40, 29, 35], [-44, -17, -27, -28], [-4, 5, -9, -13]])

C12_L1 = np.array([[-5, -11, 4, -29], [30, 32, 6, 0], [-26, -4, -52, -36], [22, 1, -6, -13]])

C21_L1 = np.array([[-1, -28, -29, -27], [-48, -74, -89, -88], [22, 76, 70, 49], [28, 54, 34, 34]])

C22_L1 = np.array([[-15, -34, -8, -10], [-20, -70, -60, -77], [59, 54, 30, 38], [72, 49, 50, 36]])


================================================================================
RECURSIVE LEVEL = 1  DIMENSION = 8x8
================================================================================

T-matrices:
T1_L1 = np.array([[2, -1, 1, 0], [-1, -4, 3, -1], [-7, -2, 2, -6], [0, 1, 3, 3]])

T2_L1 = np.array([[2, 0, 5, -3], [0, -1, 3, 4], [-6, 0, 3, -8], [-2, -2, 6, 2]])

T3_L1 = np.array([[1, -1, 1, 2], [3, 0, 0, -4], [-3, -1, 1, -1], [1, 0, -1, 3]])

T4_L1 = np.array([[1, 0, 0, -2], [-4, -4, 3, 3], [-4, -1, 1, -5], [-1, 1, 4, 0]])

T5_L1 = np.array([[5, 2, -1, 1], [1, 0, -3, -6], [-4, -6, 0, 1], [2, -1, -1, 8]])

T6_L1 = np.array([[0, 1, 4, -3], [1, 3, 0, 5], [1, 2, 1, -2], [-2, -3, 3, -1]])

T7_L1 = np.array([[3, 3, -2, 1], [2, 4, -6, -5], [3, -4, -2, 7], [2, -2, -4, 5]])

S-matrices:
S1_L1 = np.array([[9, 11, 7, 3], [18, 13, 4, 13], [5, 11, 15, 15], [7, 13, 16, 10]])

S2_L1 = np.array([[7, 5, 2, 2], [8, 4, 2, 6], [0, 4, 6, 9], [4, 7, 8, 5]])

S3_L1 = np.array([[0, -5, -5, 5], [-5, -5, 3, 0], [5, -4, -5, 3], [3, 2, -4, 3]])

S4_L1 = np.array([[-2, 1, 4, 3], [-3, -3, 2, -1], [5, -2, 3, 1], [-2, -5, 1, 2]])

S5_L1 = np.array([[2, 6, 5, 1], [10, 9, 2, 7], [5, 7, 9, 6], [3, 6, 8, 5]])

S6_L1 = np.array([[9, 6, 2, 8], [13, 8, 7, 13], [10, 7, 10, 18], [10, 15, 12, 13]])

S7_L1 = np.array([[7, 12, 11, 6], [15, 10, 6, 12], [10, 9, 18, 16], [5, 8, 17, 12]])

Q-matrices:
Q1_L1 = np.array([[5, 20, 25, 8], [-73, -43, 6, -20], [-131, -159, -123, -77], [54, 85, 97, 88]])

Q2_L1 = np.array([[2, 9, 10, 34], [8, 36, 48, 41], [-74, -74, -58, -25], [-22, 20, 44, 48]])

Q3_L1 = np.array([[16, 0, -21, 14], [-12, -23, 1, 3], [7, 14, 11, -15], [4, 5, -12, 11]])

Q4_L1 = np.array([[2, 11, 2, -1], [29, -13, -12, 1], [26, 22, -20, -20], [19, -12, 10, 0]])

Q5_L1 = np.array([[28, 47, 28, 18], [-31, -51, -70, -47], [-65, -72, -24, -41], [13, 44, 63, 29]])

Q6_L1 = np.array([[23, -9, 11, 46], [98, 105, 83, 112], [25, -1, 2, 26], [-37, -30, -7, -14]])

Q7_L1 = np.array([[51, 56, 32, 34], [-11, -30, -147, -96], [-24, 34, 92, 22], [-31, 8, 23, -16]])


C-matrices:
C11_L1 = np.array([[30, 40, 31, 23], [-24, -35, -83, -68], [-64, -31, -27, -34], [29, 37, 67, 43]])

C12_L1 = np.array([[44, 47, 7, 32], [-43, -74, -69, -44], [-58, -58, -13, -56], [17, 49, 51, 40]])

C21_L1 = np.array([[4, 20, 12, 33], [37, 23, 36, 42], [-48, -52, -78, -45], [-3, 8, 54, 48]])

C22_L1 = np.array([[42, 2, 5, 34], [5, 3, 42, 54], [-25, -72, -52, -41], [43, 40, 34, 37]])


================================================================================
RECURSIVE LEVEL = 0  DIMENSION = 16x16
================================================================================

T-matrices:
T1_L0 = np.array([[4, 9, 4, 4, 5, 2, 5, 6], [7, 9, 4, 7, 6, 2, 8, 4], [6, 6, 8, 8, 10, 7, 5, 4], [0, 6, 9, 1, 3, 5, 3, 4], [0, 6, 1, 8, 1, 6, 8, 8], [1, 6, 4, 8, 10, 7, 0, 5], [5, 6, 0, 9, 8, 3, 1, 5], [4, 7, 4, 3, 3, 5, 1, 5]])

T2_L0 = np.array([[3, 5, 4, 4, 6, 3, 3, 8], [4, 4, 6, 8, 5, 7, 9, 7], [4, 4, 7, 8, 5, 9, 7, 4], [3, 3, 9, 0, 2, 5, 4, 5], [5, 7, 0, 7, 1, 4, 5, 8], [5, 2, 3, 3, 9, 4, 0, 2], [4, 7, 1, 9, 7, 4, 6, 8], [7, 5, 3, 2, 6, 4, 6, 6]])

T3_L0 = np.array([[3, 4, 2, 4, 4, 1, 2, 2], [5, 5, 1, 3, 4, 0, 3, 1], [3, 3, 5, 5, 5, 2, 3, 3], [0, 3, 5, 1, 1, 0, 1, 4], [0, 3, 1, 3, 1, 5, 5, 5], [1, 5, 3, 5, 5, 3, 0, 5], [3, 4, 0, 4, 4, 0, 0, 0], [2, 4, 1, 1, 0, 3, 0, 3]])

T4_L0 = np.array([[1, 5, 2, 0, 1, 1, 3, 4], [2, 4, 3, 4, 2, 2, 5, 3], [3, 3, 3, 3, 5, 5, 2, 1], [0, 3, 4, 0, 2, 5, 2, 0], [0, 3, 0, 5, 0, 1, 3, 3], [0, 1, 1, 3, 5, 4, 0, 0], [2, 2, 0, 5, 4, 3, 1, 5], [2, 3, 3, 2, 3, 2, 1, 2]])

T5_L0 = np.array([[5, 8, 5, 6, 9, 5, 3, 5], [10, 9, 4, 3, 4, 2, 5, 2], [3, 5, 9, 7, 9, 2, 4, 6], [1, 6, 8, 4, 4, 4, 3, 9], [1, 6, 6, 7, 2, 6, 8, 6], [5, 9, 4, 9, 6, 3, 3, 8], [3, 7, 2, 6, 4, 2, 2, 0], [3, 4, 6, 5, 2, 6, 5, 5]])

T6_L0 = np.array([[-1, -4, 0, 0, 1, 1, -2, 2], [-3, -5, 2, 1, -1, 5, 1, 3], [-2, -2, -1, 0, -5, 2, 2, 0], [3, -3, 0, -1, -1, 0, 1, 1], [5, 1, -1, -1, 0, -2, -3, 0], [4, -4, -1, -5, -1, -3, 0, -3], [-1, 1, 1, 0, -1, 1, 5, 3], [3, -2, -1, -1, 3, -1, 5, 1]])

T7_L0 = np.array([[1, -1, 1, 2, 4, 3, -2, -1], [3, 0, 0, -4, -2, 0, -3, -2], [-3, -1, 1, -1, -1, -5, -1, 2], [1, 0, -1, 3, 1, -1, 0, 5], [1, 0, 5, -1, 1, 0, 0, -2], [4, 3, 0, 1, -4, -4, 3, 3], [-2, 1, 2, -3, -4, -1, 1, -5], [-1, -3, 2, 2, -1, 1, 4, 0]])

S-matrices:
S1_L0 = np.array([[7, 7, 4, 1, 2, 2, 0, 6], [6, 3, 5, 6, 1, 2, 5, 7], [2, 6, 6, 5, 8, 4, 3, 7], [8, 4, 10, 3, 4, 9, 3, 7], [6, 1, 4, 8, 2, 5, 9, 5], [6, 1, 8, 9, 5, 7, 2, 7], [7, 5, 9, 10, 9, 8, 6, 6], [1, 4, 9, 8, 3, 3, 4, 1]])

S2_L0 = np.array([[2, 3, 3, 0, 0, 1, 0, 2], [1, 0, 3, 3, 0, 1, 0, 5], [2, 3, 5, 0, 3, 2, 0, 3], [4, 1, 5, 1, 1, 5, 2, 4], [2, 0, 0, 3, 2, 2, 5, 5], [2, 1, 4, 5, 0, 3, 0, 4], [3, 5, 4, 5, 4, 5, 2, 3], [0, 3, 4, 4, 0, 2, 1, 0]])

S3_L0 = np.array([[-2, -4, -1, 0, 3, 0, 2, -1], [-2, 1, 2, -1, -1, -1, -3, 0], [5, 0, 4, -3, 0, -2, -1, -4], [-4, 0, -5, 1, -3, 1, 3, 0], [1, 4, 1, 0, 4, -1, 1, 2], [-1, 4, -2, -1, -3, -4, -2, 0], [-4, 4, -1, -5, 0, 1, -2, 0], [0, 4, -4, -2, 2, 0, 2, 0]])

S4_L0 = np.array([[0, -2, -2, 1, 0, -1, 0, 0], [2, 1, -3, 0, 4, 2, 0, 0], [-2, -2, 0, 4, 2, -1, 1, 2], [-4, 3, -2, 2, 2, -1, 1, 1], [-1, 5, 2, -3, 0, 1, -4, -4], [-1, 0, -4, -4, 5, 2, 0, 0], [-2, -3, 0, 0, -4, -1, 3, 0], [1, -2, 0, -1, 0, 3, 4, 4]])

S5_L0 = np.array([[5, 4, 1, 1, 2, 1, 0, 4], [5, 3, 2, 3, 1, 1, 5, 2], [0, 3, 1, 5, 5, 2, 3, 4], [4, 3, 5, 2, 3, 4, 1, 3], [4, 1, 4, 5, 0, 3, 4, 0], [4, 0, 4, 4, 5, 4, 2, 3], [4, 0, 5, 5, 5, 3, 4, 3], [1, 1, 5, 4, 3, 1, 3, 1]])

S6_L0 = np.array([[5, 3, 3, 1, 5, 2, 2, 5], [4, 4, 7, 5, 0, 1, 2, 7], [7, 6, 10, 2, 8, 2, 2, 3], [4, 4, 5, 4, 1, 10, 6, 7], [7, 5, 5, 8, 6, 4, 10, 7], [5, 5, 6, 8, 2, 3, 0, 7], [3, 9, 8, 5, 9, 9, 4, 6], [1, 8, 5, 6, 5, 3, 6, 1]])

S7_L0 = np.array([[7, 5, 2, 2, 2, 1, 0, 6], [8, 4, 2, 6, 5, 4, 5, 7], [0, 4, 6, 9, 10, 3, 4, 9], [4, 7, 8, 5, 6, 8, 4, 8], [5, 6, 6, 5, 2, 6, 5, 1], [5, 1, 4, 5, 10, 9, 2, 7], [5, 2, 9, 10, 5, 7, 9, 6], [2, 2, 9, 7, 3, 6, 8, 5]])

Q-matrices:
Q1_L0 = np.array([[205, 151, 260, 246, 148, 175, 172, 218], [275, 192, 315, 280, 189, 231, 200, 278], [299, 198, 359, 331, 226, 279, 228, 323], [135, 115, 209, 215, 152, 143, 131, 184], [208, 135, 312, 271, 174, 223, 158, 208], [222, 118, 279, 264, 142, 216, 190, 236], [221, 125, 250, 209, 107, 187, 161, 207], [162, 118, 211, 194, 114, 138, 119, 183]])

Q2_L0 = np.array([[62, 67, 120, 99, 40, 88, 52, 110], [107, 111, 186, 143, 72, 150, 66, 158], [107, 97, 179, 131, 67, 142, 59, 163], [53, 76, 119, 80, 47, 73, 23, 90], [70, 75, 139, 108, 29, 102, 37, 109], [56, 37, 75, 64, 30, 62, 53, 102], [93, 82, 155, 133, 50, 130, 73, 151], [71, 84, 125, 109, 47, 94, 52, 120]])

Q3_L0 = np.array([[-25, 28, -15, -21, 10, -10, 6, -3], [-35, 17, -9, -22, 19, -5, 3, -1], [-16, 43, -16, -36, 11, -18, 8, -13], [12, 27, 5, -30, 6, -12, -4, -18], [-37, 67, -39, -43, -13, -18, -10, -2], [-15, 53, -25, -22, 4, -23, 8, -3], [-26, 8, -11, 0, 9, -4, 10, 5], [-14, 20, -13, -15, -4, -17, -6, -6]])

Q4_L0 = np.array([[2, -13, -19, -2, 17, 19, 23, 16], [-25, -5, -28, 5, 20, 9, 26, 14], [-25, 17, -31, -15, 41, 13, -4, -7], [-13, -1, -25, -10, 37, 12, 2, 0], [-18, 3, -23, 3, 15, 9, 26, 17], [-21, 33, -15, -21, 32, 11, -16, -15], [-20, 20, -24, -17, 29, 21, 12, 9], [-13, 7, -19, -1, 28, 11, 4, 4]])

Q5_L0 = np.array([[162, 91, 152, 166, 116, 108, 134, 103], [153, 94, 106, 124, 99, 76, 106, 106], [134, 90, 151, 174, 125, 107, 133, 103], [104, 71, 133, 154, 122, 85, 121, 90], [133, 69, 156, 161, 147, 107, 125, 109], [162, 100, 163, 159, 120, 105, 132, 107], [106, 61, 83, 84, 61, 64, 75, 64], [112, 64, 124, 134, 125, 89, 98, 97]])

Q6_L0 = np.array([[-13, -11, -26, -3, -5, -11, 4, -29], [7, 40, 29, 35, 30, 32, 6, 0], [-44, -17, -27, -28, -26, -4, -52, -36], [-4, 5, -9, -13, 22, 1, -6, -13], [-1, -28, -29, -27, -15, -34, -8, -10], [-48, -74, -89, -88, -20, -70, -60, -77], [22, 76, 70, 49, 59, 54, 30, 38], [28, 54, 34, 34, 72, 49, 50, 36]])

Q7_L0 = np.array([[30, 40, 31, 23, 44, 47, 7, 32], [-24, -35, -83, -68, -43, -74, -69, -44], [-64, -31, -27, -34, -58, -58, -13, -56], [29, 37, 67, 43, 17, 49, 51, 40], [4, 20, 12, 33, 42, 2, 5, 34], [37, 23, 36, 42, 5, 3, 42, 54], [-48, -52, -78, -45, -25, -72, -52, -41], [-3, 8, 54, 48, 43, 40, 34, 37]])


C-matrices:
C11_L0 = np.array([[75, 87, 120, 101, 93, 133, 68, 163], [73, 58, 98, 93, 67, 90, 51, 142], [76, 94, 150, 108, 84, 127, 78, 157], [47, 80, 118, 94, 84, 119, 63, 134], [61, 89, 145, 146, 84, 127, 64, 150], [76, 74, 137, 126, 59, 125, 84, 168], [47, 32, 65, 63, 50, 72, 46, 111], [34, 69, 122, 107, 60, 100, 59, 127]])

C12_L0 = np.array([[137, 119, 137, 145, 126, 98, 140, 100], [118, 111, 97, 102, 118, 71, 109, 105], [118, 133, 135, 138, 136, 89, 141, 90], [116, 98, 138, 124, 128, 73, 117, 72], [96, 136, 117, 118, 134, 89, 115, 107], [147, 153, 138, 137, 124, 82, 140, 104], [80, 69, 72, 84, 70, 60, 85, 69], [98, 84, 111, 119, 121, 72, 92, 91]])

C21_L0 = np.array([[64, 54, 101, 97, 57, 107, 75, 126], [82, 106, 158, 148, 92, 159, 92, 172], [82, 114, 148, 116, 108, 155, 55, 156], [40, 75, 94, 70, 84, 85, 25, 90], [52, 78, 116, 111, 44, 111, 63, 126], [35, 70, 60, 43, 62, 73, 37, 87], [73, 102, 131, 116, 79, 151, 85, 160], [58, 91, 106, 108, 75, 105, 56, 124]])

C22_L0 = np.array([[105, 101, 99, 123, 113, 66, 130, 76], [140, 138, 149, 150, 166, 108, 143, 119], [132, 127, 137, 136, 144, 115, 125, 111], [90, 71, 86, 92, 133, 59, 98, 63], [100, 99, 105, 93, 117, 69, 103, 87], [103, 60, 90, 90, 96, 61, 85, 54], [124, 127, 154, 125, 125, 107, 128, 99], [105, 108, 107, 104, 135, 76, 111, 93]])


FINAL RESULTS:
==================================================

Strassen Result:
Result = np.array([[75, 87, 120, 101, 93, 133, 68, 163, 137, 119, 137, 145, 126, 98, 140, 100], [73, 58, 98, 93, 67, 90, 51, 142, 118, 111, 97, 102, 118, 71, 109, 105], [76, 94, 150, 108, 84, 127, 78, 157, 118, 133, 135, 138, 136, 89, 141, 90], [47, 80, 118, 94, 84, 119, 63, 134, 116, 98, 138, 124, 128, 73, 117, 72], [61, 89, 145, 146, 84, 127, 64, 150, 96, 136, 117, 118, 134, 89, 115, 107], [76, 74, 137, 126, 59, 125, 84, 168, 147, 153, 138, 137, 124, 82, 140, 104], [47, 32, 65, 63, 50, 72, 46, 111, 80, 69, 72, 84, 70, 60, 85, 69], [34, 69, 122, 107, 60, 100, 59, 127, 98, 84, 111, 119, 121, 72, 92, 91], [64, 54, 101, 97, 57, 107, 75, 126, 105, 101, 99, 123, 113, 66, 130, 76], [82, 106, 158, 148, 92, 159, 92, 172, 140, 138, 149, 150, 166, 108, 143, 119], [82, 114, 148, 116, 108, 155, 55, 156, 132, 127, 137, 136, 144, 115, 125, 111], [40, 75, 94, 70, 84, 85, 25, 90, 90, 71, 86, 92, 133, 59, 98, 63], [52, 78, 116, 111, 44, 111, 63, 126, 100, 99, 105, 93, 117, 69, 103, 87], [35, 70, 60, 43, 62, 73, 37, 87, 103, 60, 90, 90, 96, 61, 85, 54], [73, 102, 131, 116, 79, 151, 85, 160, 124, 127, 154, 125, 125, 107, 128, 99], [58, 91, 106, 108, 75, 105, 56, 124, 105, 108, 107, 104, 135, 76, 111, 93]])

Standard Matrix Multiplication Result:
Standard = np.array([[75, 87, 120, 101, 93, 133, 68, 163, 137, 119, 137, 145, 126, 98, 140, 100], [73, 58, 98, 93, 67, 90, 51, 142, 118, 111, 97, 102, 118, 71, 109, 105], [76, 94, 150, 108, 84, 127, 78, 157, 118, 133, 135, 138, 136, 89, 141, 90], [47, 80, 118, 94, 84, 119, 63, 134, 116, 98, 138, 124, 128, 73, 117, 72], [61, 89, 145, 146, 84, 127, 64, 150, 96, 136, 117, 118, 134, 89, 115, 107], [76, 74, 137, 126, 59, 125, 84, 168, 147, 153, 138, 137, 124, 82, 140, 104], [47, 32, 65, 63, 50, 72, 46, 111, 80, 69, 72, 84, 70, 60, 85, 69], [34, 69, 122, 107, 60, 100, 59, 127, 98, 84, 111, 119, 121, 72, 92, 91], [64, 54, 101, 97, 57, 107, 75, 126, 105, 101, 99, 123, 113, 66, 130, 76], [82, 106, 158, 148, 92, 159, 92, 172, 140, 138, 149, 150, 166, 108, 143, 119], [82, 114, 148, 116, 108, 155, 55, 156, 132, 127, 137, 136, 144, 115, 125, 111], [40, 75, 94, 70, 84, 85, 25, 90, 90, 71, 86, 92, 133, 59, 98, 63], [52, 78, 116, 111, 44, 111, 63, 126, 100, 99, 105, 93, 117, 69, 103, 87], [35, 70, 60, 43, 62, 73, 37, 87, 103, 60, 90, 90, 96, 61, 85, 54], [73, 102, 131, 116, 79, 151, 85, 160, 124, 127, 154, 125, 125, 107, 128, 99], [58, 91, 106, 108, 75, 105, 56, 124, 105, 108, 107, 104, 135, 76, 111, 93]])

Results match: True
